services:
  # User Service
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "${SERVICE_PORT:-8001}:8001"
    environment:
      - DEBUG=${DEBUG:-True}
      - DB_ENGINE=${DB_ENGINE:-django.db.backends.postgresql}
      - DB_NAME=${DB_NAME:-user_service_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-in-production}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - SERVICE_NAME=${SERVICE_NAME:-user-service}
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
      - SERVICE_PORT=${SERVICE_PORT:-8001}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: user-service-db
    environment:
      - POSTGRES_DB=user_service_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - microservices

  # Redis
  redis:
    image: redis:7-alpine
    container_name: user-service-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices

  # Nginx (API Gateway)
  nginx:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - user-service
    networks:
      - microservices

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservices

  # Monitoring (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservices:
    driver: bridge